class DragonHandler{constructor(e){this.component=e}fire(e,t){return this.component.dispatchEvent(new CustomEvent(e,{detail:t})),this}subscribe(e,t){return this.component.addEventListener(e,e=>{e instanceof CustomEvent?t(e.detail):t(e)}),this}}class Dragon{async inlineTemplate(e,t){const n=`\n            <template>\n                ${e}\n            </template>\n        `;return async(e={},o=null,a="any",s=null)=>{s=s||Math.random().toString(32).slice(2);const i=await this.htmlTemplate(n,e,o,a,s),c=this.handle(i);return c.subscribe("@render",e=>{t(e,i,c)}),c.fire("@render",e),i}}async loadTemplate(e,t={},n=null,o="any",a=null){if("string"==typeof e&&(e=document.querySelector(e)),!e)return void console.warn("Not template found",html,a);"string"==typeof n&&(n=document.querySelector(n)),n||(n=document.body);const s=document.importNode(e.content,!0),i=document.createElement("div");i.dataset.id=o,n.appendChild(i),i.appendChild(s);let c=!0,l=!0;return i.addEventListener("@import",async e=>{console.log("@import");const{url:t,config:n,target:o,id:a,success:s,error:c}=e.detail;console.log("@import",t,n,o,a,s,c);try{const e=await this.importTemplate(t,n,o,a);s&&s(e,i,a),console.log(e)}catch(e){console.log(e),c(e)}}),i.addEventListener("@show",e=>{l||(l=!0,i.hidden=!1)}),i.addEventListener("@hide",e=>{l&&(l=!1,i.hidden=!0)}),i.addEventListener("@mount",e=>{c||(c=!0,n.appendChild(i))}),i.addEventListener("@unmount",e=>{c&&(c=!1,n.removeChild(i))}),i.dispatchEvent(new CustomEvent("@render",{detail:t})),i}async htmlTemplate(e,t={},n=null,o="any",a=null){this.cacheHTML=this.cacheHTML||{},"string"==typeof n&&(n=document.querySelector(n)),n||(n=document.body);let s=this.cacheHTML[a];if(!s){console.log(a),s=this.cacheHTML[a]=document.createElement("div"),n.appendChild(s);const t=document.createRange(),o=t.createContextualFragment(e);t.selectNode(s),s.appendChild(o)}const i=s.querySelector("template");return await this.loadTemplate(i,t,n,o,a)}async importTemplate(e,t={},n=null,o="any"){if(this.cache=this.cache||{},e in this.cache)return await this.htmlTemplate(this.cache[e],t,n,o,e);const a=await fetch(e,{method:"GET",headers:{"Access-Control-Allow-Origin":"*"}});if(!a.ok)return void console.warn(`Invalid template: ${e}`);const s=await a.text();return this.cache[e]=s,await this.htmlTemplate(s,t,n,o,e)}handle(e){return new DragonHandler(e)}async run(e){return await e(this)}async addComponent(e,t){this.components=this.components||{},e in this.components||(this.components[e]=t,this[e]=(async(e,n=null,o="any")=>await this.importTemplate(t,e,n,o)))}async addComponents(e={}){for(let t in e)await this.addComponent(t,e[t])}async test(e={}){let t=document.querySelector(".test");for(t||((t=document.createElement("div")).className="test",document.body.appendChild(t));t.firstChild;)t.removeChild(t.firstChild);for(let n in this.components||{}){let o=this.components[n];console.log("test",n,o),await this[n](e[n]||{},t)}}}const dragon=new Dragon;
