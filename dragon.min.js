class DragonHandler{constructor(component){this.component=component}
fire(channel,data){this.component.dispatchEvent(new CustomEvent(channel,{detail:data}));return this}
subscribe(channel,callback){this.component.addEventListener(channel,e=>{if(e instanceof CustomEvent){callback(e.detail);return}
callback(e)});return this}}
class Dragon{async inlineTemplate(html,renderHandler){const htmlTemplate=`
            <template>
                ${html}
            </template>
        `;return async(config={},target=null,id="any",cacheURL=null)=>{cacheURL=cacheURL||Math.random().toString(32).slice(2);const component=await this.htmlTemplate(htmlTemplate,config,target,id,cacheURL);const componentHandler=this.handle(component);componentHandler.subscribe("@render",config=>{renderHandler(config,component,componentHandler)});componentHandler.fire("@render",config);return component}}
async loadTemplate(template,config={},target=null,id="any",cacheURL=null){if(typeof template==="string"){template=document.querySelector(template)}
if(!template){console.warn("Not template found",html,cacheURL);return}
if(typeof target==="string"){target=document.querySelector(target)}
if(!target){target=document.body}
const node=document.importNode(template.content,!0);const divRender=document.createElement("div");divRender.dataset.id=id;target.appendChild(divRender);divRender.appendChild(node);let isMounted=!0;let isShown=!0;divRender.addEventListener("@import",async e=>{console.log("@import");const{url,config,target,id,success,error}=e.detail;console.log("@import",url,config,target,id,success,error);try{const component=await this.importTemplate(url,config,target,id);if(success){success(component,divRender,id)}
console.log(component)}catch(err){console.log(err);error(err)}});divRender.addEventListener("@show",e=>{if(isShown){return}
isShown=!0;divRender.hidden=!1});divRender.addEventListener("@hide",e=>{if(!isShown){return}
isShown=!1;divRender.hidden=!0});divRender.addEventListener("@mount",e=>{if(isMounted){return}
isMounted=!0;target.appendChild(divRender)});divRender.addEventListener("@unmount",e=>{if(!isMounted){return}
isMounted=!1;target.removeChild(divRender)});divRender.dispatchEvent(new CustomEvent("@render",{detail:config}));return divRender}
async htmlTemplate(html,config={},target=null,id="any",cacheURL=null){this.cacheHTML=this.cacheHTML||{};if(typeof target==="string"){target=document.querySelector(target)}
if(!target){target=document.body}
let divTemplate=this.cacheHTML[cacheURL];if(!divTemplate){console.log(cacheURL);divTemplate=this.cacheHTML[cacheURL]=document.createElement("div");target.appendChild(divTemplate);const range=document.createRange();const fragment=range.createContextualFragment(html);range.selectNode(divTemplate);divTemplate.appendChild(fragment)}
const template=divTemplate.querySelector("template");return await this.loadTemplate(template,config,target,id,cacheURL)}
async importTemplate(url,config={},target=null,id="any"){this.cache=this.cache||{};if(url in this.cache){return await this.htmlTemplate(this.cache[url],config,target,id,url)}
const response=await fetch(url,{method:"GET",headers:{'Access-Control-Allow-Origin':'*',},});if(!response.ok){console.warn(`Invalid template: ${url}`);return}
const html=await response.text();this.cache[url]=html;return await this.htmlTemplate(html,config,target,id,url)}
handle(component){return new DragonHandler(component)}
async run(callback){return await callback(this)}
async addComponent(name,url){this.components=this.components||{};if(name in this.components){return}
this.components[name]=url;this[name]=async(config,target=null,id="any")=>{return await this.importTemplate(url,config,target,id)}}
async addComponents(components={}){for(let name in components){await this.addComponent(name,components[name])}}
async test(config={}){let divTest=document.querySelector(".test");if(!divTest){divTest=document.createElement("div");divTest.className="test";document.body.appendChild(divTest)}
while(divTest.firstChild){divTest.removeChild(divTest.firstChild)}
for(let name in(this.components||{})){let url=this.components[name];console.log("test",name,url);await this[name](config[name]||{},divTest)}}};const dragon=new Dragon()
